// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://qdxpxqdewqrbvlsajeeo.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InFkeHB4cWRld3FyYnZsc2FqZWVvIiwicm9sZSI6ImFub24iLCJpYXQiOjE3Mzc2NzM0MDMsImV4cCI6MjA1MzI0OTQwM30.-wnDf1hMWOow3O1kbcTfC3mw59h-5SsmdFGhp5bKgUE";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY);

// Utility function to get proxy URL by ID
export const getProxyUrlById = async (proxyId: string): Promise<string | null> => {
  if (!proxyId) return null;
  
  const { data, error } = await supabase
    .from('proxies')
    .select('address, port, username, password')
    .eq('id', proxyId)
    .single();
    
  if (error || !data) {
    console.error('Error fetching proxy:', error);
    return null;
  }
  
  // Format: address:port:username:password or address:port
  if (data.username && data.password) {
    return `${data.address}:${data.port}:${data.username}:${data.password}`;
  }
  
  return `${data.address}:${data.port}`;
};

// Get random valid proxy
export const getRandomValidProxy = async (): Promise<string | null> => {
  const { data, error } = await supabase
    .from('proxies')
    .select('id, address, port, username, password')
    .eq('valid', true)
    .limit(50);
    
  if (error || !data || data.length === 0) {
    console.error('Error fetching valid proxies:', error);
    return null;
  }
  
  // Select a random proxy from the result
  const randomIndex = Math.floor(Math.random() * data.length);
  const proxy = data[randomIndex];
  
  // Format: address:port:username:password or address:port
  if (proxy.username && proxy.password) {
    return `${proxy.address}:${proxy.port}:${proxy.username}:${proxy.password}`;
  }
  
  return `${proxy.address}:${proxy.port}`;
};

// Fetch unique slaves (prevents duplicates with the same name)
export const getUniqueSlaves = async () => {
  const { data, error } = await supabase
    .from('slaves')
    .select('*')
    .order('last_seen', { ascending: false });
    
  if (error) {
    console.error('Error fetching slaves:', error);
    return [];
  }
  
  // Use a Map to keep only the most recent entry for each slave name
  const uniqueSlaves = new Map();
  data.forEach((slave) => {
    if (!uniqueSlaves.has(slave.name) && slave && slave.name) {
      uniqueSlaves.set(slave.name, slave);
    }
  });
  
  return Array.from(uniqueSlaves.values());
};

// Fetch screenshot for a viewer
export const getViewerScreenshot = async (viewerId: string): Promise<string | null> => {
  // First check if the column exists by doing a metadata query
  const { data: metaData, error: metaError } = await supabase
    .from('viewers')
    .select('error') // Select any valid column just to check if the table exists
    .eq('id', viewerId)
    .limit(1);
    
  if (metaError) {
    console.error('Error accessing viewers table:', metaError);
    return null;
  }
  
  // Now try to get the screenshot, but handle the case where the column doesn't exist
  try {
    // Instead of using RPC which seems to have type issues, let's directly query the database
    const { data, error } = await supabase
      .from('viewers')
      .select('*')
      .eq('id', viewerId)
      .single();
    
    if (error) {
      console.error('Error fetching viewer data:', error);
      return null;
    }
    
    // Check if the data has a screenshot property
    if (data && 'screenshot' in data) {
      return data.screenshot as string;
    } else {
      console.log('Viewer found but screenshot is not available');
      return null;
    }
  } catch (error) {
    console.error('Screenshot functionality not available:', error);
    return null;
  }
};

// Send command to slaves
export const sendCommand = async (command: {
  type: 'spawn' | 'stop' | 'update_proxy' | 'reconnect' | 'custom';
  target: string;
  payload: Record<string, any>;
}): Promise<string | null> => {
  const { type, target, payload } = command;
  
  const { data, error } = await supabase
    .from('commands')
    .insert([{
      type,
      target,
      payload,
      timestamp: new Date().toISOString(),
      status: 'pending'
    }])
    .select()
    .single();
    
  if (error) {
    console.error('Error sending command:', error);
    return null;
  }
  
  return data.id;
};

// Get user plan and viewer limit
export const getUserPlanLimit = async (userId: string): Promise<number> => {
  // First get the plan_id from the user
  const { data: userData, error: userError } = await supabase
    .from('users')
    .select('plan_id')
    .eq('id', userId)
    .single();
    
  if (userError || !userData || !userData.plan_id) {
    console.error('Failed to fetch user plan:', userError);
    return 0; // Default to 0 if no plan or error
  }

  // Then get the plan details
  const { data: planData, error: planError } = await supabase
    .from('plans')
    .select('viewer_limit')
    .eq('id', userData.plan_id)
    .single();
  
  if (planError || !planData) {
    console.error('Failed to fetch plan details:', planError);
    return 0;
  }
  
  return planData.viewer_limit;
};

// Check if user can start more viewers
export const canStartViewers = async (userId: string, requestedViewers: number = 1): Promise<boolean> => {
  // Get plan limit
  const limit = await getUserPlanLimit(userId);
  
  // Use an optimized approach to only count records without excessive type instantiation
  const { count, error } = await supabase
    .from('viewers')
    .select('', { count: 'exact', head: true })
    .eq('user_id', userId)
    .eq('status', 'running');
  
  if (error) {
    console.error('Error checking active viewers:', error);
    return false;
  }
  
  // Use count directly from the query result
  return (count || 0) + requestedViewers <= limit;
};

// Get remaining viewers count for a user
export const getRemainingViewers = async (userId: string): Promise<number> => {
  const limit = await getUserPlanLimit(userId);
  
  // Use an optimized approach to only count records without excessive type instantiation
  const { count, error } = await supabase
    .from('viewers')
    .select('', { count: 'exact', head: true })
    .eq('user_id', userId)
    .eq('status', 'running');
  
  if (error) {
    console.error('Error checking remaining viewers:', error);
    return 0;
  }
  
  return Math.max(0, limit - (count || 0));
};

// Log viewer usage
export const logViewerUsage = async (userId: string, viewerCount: number): Promise<void> => {
  const { error } = await supabase
    .from('viewer_logs')
    .insert({
      user_id: userId,
      viewer_count: viewerCount,
      started_at: new Date().toISOString()
    });
  
  if (error) {
    console.error('Error logging viewer usage:', error);
  }
};
